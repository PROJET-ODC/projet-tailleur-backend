// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  lastname  String
  firstname String
  phone     String   @unique
  city      String
  picture   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  compte    Compte?

  @@map("users")
}

model ConversionCredit {
  id        Int      @id @default(autoincrement())
  credit    Int
  prix      Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("conversion_credits")
}

model Compte {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  role          String
  etat          String
  identifiant   String         @unique
  bio           String
  credit        Int
  user_id       Int            @unique
  user          User           @relation(fields: [user_id], references: [id])
  tailleur      Tailleur?
  client        Client?
  vendeur       Vendeur?
  mesure        Mesure?
  followeds     Follow[]       @relation("Followeds")
  followers     Follow[]       @relation("Followers")
  reporteds     Report[]       @relation("Reporteds")
  reporters     Report[]       @relation("Reporters")
  noteds        Note[]         @relation("Noteds")
  noters        Note[]         @relation("Noters")
  blockeds      Bloquer[]      @relation("Blockeds")
  blockers      Bloquer[]      @relation("Blockers")
  messageds     Message[]      @relation("Messageds")
  messagers     Message[]      @relation("Messagers")
  comments      Comment[]
  likes         Like[]
  favoris       Favori[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  Commande      Commande[]

  @@map("comptes")
}

model Tailleur {
  id        Int               @id @default(autoincrement())
  compte_id Int               @unique
  compte    Compte            @relation(fields: [compte_id], references: [id])
  posts     Post[]
  status    Status[]
  commande  CommandeArticle[]
  stock     Stock[]
  paiement        PaiementArticle[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())

  @@map("tailleurs")
}

model Client {
  id        Int      @id @default(autoincrement())
  compte_id Int      @unique
  compte    Compte   @relation(fields: [compte_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("clients")
}

model Mesure {
  id        Int      @id @default(autoincrement())
  compte_id Int      @unique
  compte    Compte   @relation(fields: [compte_id], references: [id])
  Epaule    Float?
  Manche    Float?
  Longueur  Float?
  Poitrine  Float?
  Fesse     Float?
  Taille    Float?
  Cou       Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("mesures")
}

model Report {
  id          Int      @id @default(autoincrement())
  motif       String
  reporter_id Int
  reported_id Int
  reporter    Compte   @relation("Reporters", fields: [reporter_id], references: [id])
  reported    Compte   @relation("Reporteds", fields: [reported_id], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@unique([reporter_id, reported_id])
  @@map("reports")
}

model Note {
  id        Int      @id @default(autoincrement())
  note      String
  noter_id  Int
  noted_id  Int
  noter     Compte   @relation("Noters", fields: [noter_id], references: [id])
  noted     Compte   @relation("Noteds", fields: [noted_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([noter_id, noted_id])
  @@map("notes")
}

model Bloquer {
  id         Int      @id @default(autoincrement())
  blocker_id Int
  blocked_id Int
  blocker    Compte   @relation("Blockers", fields: [blocker_id], references: [id])
  blocked    Compte   @relation("Blockeds", fields: [blocked_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@unique([blocker_id, blocked_id])
  @@map("bloquers")
}

enum StatusFollow {
  FOLLOWED
  UNFOLLOWED
}

model Follow {
  id          Int          @id @default(autoincrement())
  status      StatusFollow
  follower_id Int
  followed_id Int
  follower    Compte       @relation("Followers", fields: [follower_id], references: [id])
  followed    Compte       @relation("Followeds", fields: [followed_id], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())

  @@unique([follower_id, followed_id])
  @@map("follows")
}

model Message {
  id          Int      @id @default(autoincrement())
  texte       String
  messager_id Int
  messaged_id Int
  messager    Compte   @relation("Messagers", fields: [messager_id], references: [id])
  messaged    Compte   @relation("Messageds", fields: [messaged_id], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("messages")
}

enum CategoriePost {
  IMAGE
  VIDEO
}

enum StatusPost {
  PUBLIE
  PAS_PUBLIE
  ARCHIVE
}

model Status {
  id          Int      @id @default(autoincrement())
  files       Json
  description String
  duration    String
  viewNb      Int
  tailleur_id Int
  tailleur    Tailleur @relation(fields: [tailleur_id], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("status")
}

model Post {
  id          Int           @id @default(autoincrement())
  content     String
  title       String
  files       Json?
  count       Int
  shareNb     Int
  viewNb      Int
  tailleur_id Int
  status      StatusPost
  categorie   CategoriePost
  tailleur    Tailleur      @relation(fields: [tailleur_id], references: [id])
  tags        Tag[]
  comments    Comment[]
  favoris     Favori[]
  likes       Like[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  TissuPost   TissuPost[]
  TaillePost  TaillePost[]
  Commande    Commande[]

  @@map("posts")
}

model Tag {
  id        Int      @id @default(autoincrement())
  libelle   String
  post_id   Int
  post      Post     @relation(fields: [post_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("tags")
}

model Comment {
  id        Int               @id @default(autoincrement())
  content   String
  post_id   Int
  compte_id Int
  post      Post              @relation(fields: [post_id], references: [id])
  compte    Compte            @relation(fields: [compte_id], references: [id])
  responses CommentResponse[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())

  @@map("comments")
}

model CommentResponse {
  id         Int      @id @default(autoincrement())
  content    String
  comment_id Int
  comment    Comment  @relation(fields: [comment_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@map("comment_responses")
}

model Favori {
  id        Int      @id @default(autoincrement())
  compte_id Int
  post_id   Int
  post      Post     @relation(fields: [post_id], references: [id])
  compte    Compte   @relation(fields: [compte_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("favoris")
}

enum etatLike {
  LIKE
  DISLIKE
}

model Like {
  id        Int      @id @default(autoincrement())
  etat      etatLike
  compte_id Int
  post_id   Int
  post      Post     @relation(fields: [post_id], references: [id])
  compte    Compte   @relation(fields: [compte_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("likes")
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  compte_id Int
  compte    Compte   @relation(fields: [compte_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("notifications")
}

enum etatCommande {
  TERMINER
  EN_ATTENTE
}

model CommandeArticle {
  id              Int                     @id @default(autoincrement())
  etat            etatCommande
  numero          String
  montantTotal    Decimal                 @db.Decimal(10, 2)
  tailleur_id     Int
  tailleur        Tailleur                @relation(fields: [tailleur_id], references: [id])
  paiement        PaiementArticle[]
  detailcommandes DetailCommandeArticle[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now())

  @@map("commande_articles")
}

model Stock {
  id          Int         @id @default(autoincrement())
  prix        Decimal     @db.Decimal(10, 2)
  qte         Int
  article_id  Int
  article     Article     @relation(fields: [article_id], references: [id])
  tailleur_id Int
  tailleur    Tailleur    @relation(fields: [tailleur_id], references: [id])
  tissupost   TissuPost[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@map("stocks")
}

model DetailCommandeArticle {
  id          Int             @id @default(autoincrement())
  qte         Int
  prix        Decimal         @db.Decimal(10, 2)
  article_id  Int
  article     Article         @relation(fields: [article_id], references: [id])
  commande_id Int
  commande    CommandeArticle @relation(fields: [commande_id], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())

  @@map("detail_commande_articles")
}

enum etatArticle {
  DELETE
  ACTIF
}

model Article {
  id              Int                     @id @default(autoincrement())
  libelle         String
  etat            etatArticle
  image           Json
  description     String
  slug            String                  @unique
  detailcommandes DetailCommandeArticle[]
  article_unite   ArticleUnite[]
  categorie_id    Int
  categorie       Categorie               @relation(fields: [categorie_id], references: [id])
  vendeur_id      Int
  vendeur         Vendeur                 @relation(fields: [vendeur_id], references: [id])
  couleur_article CouleurArticle[]
  stock           Stock[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now())

  @@map("articles")
}

model Unite {
  id            Int            @id @default(autoincrement())
  libelle       String
  article_unite ArticleUnite[]
  categorie_id  Int
  categorie     Categorie      @relation(fields: [categorie_id], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())

  @@map("unites")
}

model PaiementArticle {
  id          Int             @id @default(autoincrement())
  montant     Decimal         @db.Decimal(10, 2)
  commande_id Int
  commande    CommandeArticle @relation(fields: [commande_id], references: [id])
  tailleur_id Int
  tailleur    Tailleur      @relation(fields: [tailleur_id], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())

  @@map("paiements_articles")
}

model ArticleUnite {
  id         Int      @id @default(autoincrement())
  prix       Int
  qte        Int
  article_id Int
  article    Article  @relation(fields: [article_id], references: [id])
  unite_id   Int
  unite      Unite    @relation(fields: [unite_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@map("article_unites")
}

model Categorie {
  id         Int       @id @default(autoincrement())
  libelle    String
  article    Article[]
  categories Unite[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())

  @@map("categories")
}

model Vendeur {
  id        Int       @id @default(autoincrement())
  compte_id Int       @unique
  compte    Compte    @relation(fields: [compte_id], references: [id])
  articles  Article[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@map("vendeurs")
}

model Couleur {
  id              Int              @id @default(autoincrement())
  libelle         String
  couleur_article CouleurArticle[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())

  @@map("couleurs")
}

model CouleurArticle {
  id         Int      @id @default(autoincrement())
  article_id Int
  article    Article  @relation(fields: [article_id], references: [id])
  couleur_id Int
  couleur    Couleur  @relation(fields: [couleur_id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@map("couleur_articles")
}

model TissuPost {
  id        Int      @id @default(autoincrement())
  stock_id  Int
  stock     Stock    @relation(fields: [stock_id], references: [id])
  post_id   Int
  post      Post     @relation(fields: [post_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("tissu_posts")
}

model Taille {
  id         Int          @id @default(autoincrement())
  libelle    String
  qte        String
  taillepost TaillePost[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())

  @@map("tailles")
}

model TaillePost {
  id        Int      @id @default(autoincrement())
  taille_id Int
  taille    Taille   @relation(fields: [taille_id], references: [id])
  post_id   Int
  post      Post     @relation(fields: [post_id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("taille_posts")
}

model Commande {
  id        Int        @id @default(autoincrement())
  post_id   Int
  post      Post       @relation(fields: [post_id], references: [id])
  compte_id Int
  compte    Compte     @relation(fields: [compte_id], references: [id])
  paiement  Paiement[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())

  @@map("commandes")
}

model Paiement {
  id          Int      @id @default(autoincrement())
  montant     Decimal  @db.Decimal(10, 2)
  commande_id Int
  commande    Commande @relation(fields: [commande_id], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@map("paiements")
}

// model X {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())
// }
